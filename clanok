<template>
  <section class="articles">
    <div class="container">
      <h2 class="articles-title">Najnovšie články</h2>
      <div class="articles-list">
        <!-- Dynamicky zobrazené články -->
        <div
          v-for="article in articles"
          :key="article.id"
          class="article-card right"
        >
          <img src="../images/pngegg.png" :alt="article.title" class="mobile" />
          <div class="article-content">
          <h3 class="mobile">{{ article.title }}</h3>
          <p>{{ article.description }}</p>
        
          <NuxtLink :to="`/clanky/${article.slug}`" class="read-more">
            Prečítať viac
          </NuxtLink>
        </div>
        </div>
      </div>
    </div>
  </section>
</template>

<script lang="ts">
import axios from "axios";

export default {
  data() {
    return {
      articles: [] as Array<any>, // Explicitly declare articles as an array of any type
    };
  },
  mounted() {
    this.fetchArticles();
  },
  methods: {
    async fetchArticles() {
      try {
        const response = await axios.get("http://localhost:1337/api/articles/");
        // Ensure data structure is correct
        this.articles = response.data.data || []; // If no data exists, fallback to an empty array
      } catch (error) {
        console.error("Error fetching articles:", error);
        this.articles = []; // Set articles to an empty array on error
      }
    },
  },
};
</script>

<style scoped>
.right {
  /* position: relative;
  perspective: 310px; */
  opacity: 0.5;

  transition: all 1s ease;
}
.right:hover {
  opacity: 1;
  transform: scale(1.1);
  cursor: default;
}
.mobile {
  transition: all 1s ease;
  /* filter: contrast(0.5); */

  width: 200px;
  height: 100%;

  text-align: center;
  font-size: 2rem;

  margin-bottom: 2rem;
}
.mobile:hover {
  transform: scale(1.1);

  cursor: pointer;
}
.articles {
  padding-top: 2rem;
  padding-bottom: 1rem;
}

.articles-title {
  text-align: center;
  font-size: 2.5rem;
  color: #c9a76a;
  margin-bottom: 3rem;
}

.articles-list {
  display: flex;
  gap: 2rem;
  justify-content: center;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.5rem;
  transform: scale(0.3);
  animation: scaleIn 2.5s forwards;
}

.article-card {
  padding: 8.5rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);

  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: rgb(255, 255, 255);
}

.article-image {
  width: 100%;
  height: 200px;
  object-fit: cover;
  border-radius: 8px;
}

.article-content {
  padding-top: 1rem;
  text-align: center;
}

.article-content h3 {
  font-size: 1.6rem;
  color: #4b2e1d;
  margin-bottom: 1rem;
}

.article-content p {
  color: #5a4536;
  font-size: 1rem;
  line-height: 1.5;
  margin-bottom: 1.5rem;
}

.read-more {
  font-weight: 600;
  color: #c9a76a;
  text-decoration: none;
  font-size: 1rem;
}

.read-more:hover {
  color: #4b2e1d;
}

@media (max-width: 768px) {
  .articles-list {
    grid-template-columns: 1fr;
  }

  .article-content h3 {
    font-size: 1.4rem;
  }

  .article-content p {
    font-size: 0.9rem;
  }
}
@keyframes scaleIn {
  to {
    transform: scale(1) rotate(0deg);
  }
}
</style>


----------
slug 
<template>
  <div v-if="article">
    <article>
      <h1 class="article-title">{{ article.title }}</h1>
      <div v-html="article.contents"></div>
      <img v-if="article.image" :src="article.image" alt="Article Image" />
    </article>
  </div>
  <div v-else-if="loading">
    <p class="loading">Načítava sa článok...</p>
  </div>
  <div v-else>
    <p class="error-message">Článok sa nenašiel.</p>
  </div>
</template>

<script lang="ts">
import axios from "axios";
import { marked } from "marked";

export default {
  data() {
    return {
      article: {
        title: "",
        contents: "", // Initialize as an empty string
        image: "", // Initialize image URL as an empty string
      },
      loading: false,
    };
  },
  methods: {
    async fetchArticle() {
      this.loading = true;
      try {
        const slug = this.$route.params._slug;
        const response = await axios.get(
          `http://localhost:1337/api/articles?filters[slug][$eq]=${slug}`
        );

        if (response.data.data && response.data.data.length > 0) {
          const attributes = response.data.data[0];

          // Force TypeScript to understand the return type is string
          const contents = String(marked(attributes.contents)); // Explicitly cast marked() result to string

          // Assigning values to the article object
          this.article = {
            title: attributes.title,
            contents: contents, // contents is explicitly treated as a string
            image: attributes.image?.url || "", // If there's no image URL, fallback to an empty string
          };
        }
      } catch (error) {
        console.error("Error fetching article:", error);
        this.article = {
          title: "",
          contents: "Error loading article",
          image: "",
        }; // Fallback in case of error
      } finally {
        this.loading = false;
      }
    },
  },
  created() {
    this.fetchArticle(); // Automatically fetch the article when the component is created
  },
};
</script>

<style scoped>
/* General Article Styling */
article.title {
  text-align: center;
  max-width: 1400px;
  margin: 3rem auto;
  background-color: #ffffff;
  padding: 3rem;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  font-family: "Merriweather", serif;
  color: #333;
  line-height: 1.6;
}
article {
  text-align: center;

  margin: 3rem auto;
  background-color: #ffffff;
  padding: 3rem;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  font-family: "Merriweather", serif;
  color: #333;
  line-height: 1.6;
  text-align: left;
  transition: box-shadow 0.3s ease;
}

article:hover {
  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1); /* Hover effect for the article container */
}

/* Title Styling */
h1 {
  text-align: center;
  font-size: 3rem;
  color: #2c3e50;
  margin-bottom: 2rem;
  font-weight: 800;
  line-height: 1.3;
  text-transform: uppercase;
  letter-spacing: 1px;
  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1); /* Add subtle shadow */
}

/* Image Styling */
img {
  width: 100%;
  max-height: 500px;
  height: auto;
  border-radius: 15px;
  margin-top: 2rem;
  object-fit: cover;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  transition: transform 0.3s ease-in-out;
}

img:hover {
  transform: scale(1.05); /* Slight zoom effect on hover */
}

/* Content Paragraph Styling */
p {
  font-size: 1.2rem;
  color: #555;
  margin-bottom: 2rem;
  text-indent: 2rem; /* Indentation for paragraphs */
  text-align: justify;
  letter-spacing: 0.5px;
  line-height: 1.8;
  transition: color 0.3s ease;
}

/* Adjust paragraph color on hover */
p:hover {
  color: #2c3e50; /* Darker color when hovered */
}

/* Loading message styling */
.loading {
  font-size: 1.3rem;
  color: #f39c12;
  text-align: center;
  font-weight: bold;
  font-style: italic;
}

/* Error message styling */
.error-message {
  font-size: 1.3rem;
  color: #e74c3c;
  text-align: center;
  font-weight: bold;
  font-style: italic;
}

/* Responsive Styling */
@media (max-width: 768px) {
  article {
    padding: 1.5rem;
  }

  h1 {
    font-size: 2.5rem;
  }

  p {
    font-size: 1.1rem;
  }

  img {
    width: 100%;
    max-height: 400px;
  }
}

/* Responsive Styling for very small screens (e.g., phones in portrait mode) */
@media (max-width: 480px) {
  h1 {
    font-size: 2rem;
  }

  p {
    font-size: 1rem;
  }

  img {
    width: 100%;
  }
}
</style>
